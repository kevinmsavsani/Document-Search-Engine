{{Infobox programming language
| name = ALGOL 60
| paradigm = [[procedural programming|procedural]], [[imperative programming|imperative]], [[structured programming|structured]]
| year = 1960
| designer = [[Friedrich L. Bauer|Bauer]], [[Hermann Bottenbruch|Bottenbruch]], [[Heinz Rutishauser|Rutishauser]], [[Klaus Samelson|Samelson]], [[John Backus|Backus]], [[Charles Katz|Katz]], [[Alan Perlis|Perlis]], [[Joseph Henry Wegstein|Wegstein]], [[Peter Naur|Naur]], [[Bernard Vauquois|Vauquois]], [[Adriaan van Wijngaarden|van Wijngaarden]],  [[Michael Woodger|Woodger]], [[Julien Green (computer scientist)|Green]], [[John McCarthy (computer scientist)|McCarthy]] 
| influenced_by = [[ALGOL 58]]
}}

[[Niklaus Wirth]] based his own [[ALGOL W]] on ALGOL 60 before moving to develop [[Pascal (programming language)|Pascal]]. Algol-W was intended to be the next generation ALGOL but the [[ALGOL 68]] committee decided on a design that was more complex and advanced rather than a cleaned simplified ALGOL 60. The official ALGOL versions are named after the year they were first published.

Note: [[ALGOL 68]] is substantially different from Algol 60 but was not well received so that in general "Algol" means dialects of Algol 60.

==Standardization==
ALGOL 60 - with [[COBOL]] - were the first languages to seek standardization.
* ISO 1538:1984, Programming language Algol 60 (now withdrawn)
* ISO TR 1672:1977, Algol 60 Hardware Representation (now withdrawn)

==History==
ALGOL 60 was used mostly by research computer scientists in the United States and in Europe. Its use in commercial applications was hindered by the absence of standard input/output facilities in its description and the lack of interest in the language by large computer vendors. ALGOL 60 did however become the standard for the publication of algorithms and had a profound effect on future language development.



The following people attended the meeting in Paris (from January 1 to 16):
* [[Friedrich L. Bauer]], [[Peter Naur]], [[Heinz Rutishauser]], [[Klaus Samelson]], [[Bernard Vauquois]], [[Adriaan van Wijngaarden]], and [[Michael Woodger]] (from Europe)
* [[John Backus|John W. Backus]], [[Julien Green (computer scientist)|Julien Green]], [[Charles Katz]], [[John McCarthy (computer scientist)|John McCarthy]], [[Alan Perlis|Alan J. Perlis]], and [[Joseph Henry Wegstein]] (from the USA).
Alan Perlis gave a vivid description of the meeting: "The meetings were exhausting, interminable, and exhilarating. One became aggravated when one's good ideas were discarded along with the bad ones of others. Nevertheless, diligence persisted during the entire period. The chemistry of the 13 was excellent."

Both John Backus and Peter Naur served on the committee which created ALGOL 60 as did [[Wally Feurzeig]], who later created [[Logo (programming language)|Logo]].

| author=Jonathan Rees and William Clinger (Editors), Hal Abelson, R. K. Dybvig et al.
| title=Revised(3) Report on the Algorithmic Language Scheme, (Dedicated to the Memory of ALGOL 60)
| url=http://groups.csail.mit.edu/mac/ftpdir/scheme-reports/r3rs-html/r3rs_toc.html
|accessdate=2009-10-20

===ALGOL 60 implementations timeline===

{|class="wikitable" border="1" style="border-collapse: collapse;"
|-
!|Name
!|Year
!|Author
!|State
!|Description
!|Target CPU
|-
|[[Elliott ALGOL]]|| 1960s || [[C. A. R. Hoare]] || UK || Subject of the famous [[Turing Award|Turing]] lecture|| [[Elliott 803]] & the Elliott 503
|-
|-
|[[Case ALGOL]]|| 1961 || || USA || [[Simula]] was originally contracted as a simulation extension of the Case ALGOL || [[UNIVAC 1107]]
|-
|[[GOGOL]]|| 1961 || [[Bill McKeeman]] || USA || For [[Odin|ODIN]] time-sharing system || [[PDP-1]]
|-
|[[X1 Algol 60]]|| 1961 || [[Edsger W. Dijkstra]] and J.A. Zonneveld || Netherlands || Mathematical Centre, Amsterdam || [[Electrologica X1|X1]]
|-
|[[RegneCentralen ALGOL]]|| 1961 || [[Peter Naur]], [[Jørn Jensen]] || Denmark || Implementation of full Algol 60 || DASK at Regnecentralen
|-
|[[Dartmouth ALGOL 30]]|| 1962 || [[Thomas Eugene Kurtz]] et al. || USA || || [[LGP-30]]
|-
|-
| Algol Translator || 1962 || G. van der Mey and [[Willem van der Poel|W.L. van der Poel]] || Netherlands || Staatsbedrijf der Posterijen, Telegrafie en Telefonie || [[ZEBRA (computer)|ZEBRA]]
|-
|-
|[[VALGOL]]|| 1963 || [[Val Schorre]] || USA || A test of the [[META II]] compiler compiler
|-
|FP6000 Algol || 1963 || [[Roger Moore (computer scientist)|Roger Moore]] || Canada || written for [[SaskPower | Saskatchewan Power Corp]] || [[Ferranti-Packard 6000 | FP6000]] 
|-
|[[Whetstone (benchmark)|Whetstone]]|| 1964 || [[Brian Randell]] and L J Russell || UK || Atomic Power Division of English Electric Company. Precursor to [[Ferranti Pegasus]], National Physical Laboratories [[Automatic Computing Engine|ACE]] and [[English Electric DEUCE]] implementations. || English Electric Company [[English Electric KDF9|KDF9]]
|-
|[[NU ALGOL]]|| 1965 || || Norway || || [[UNIVAC]]
|-
|ALGEK|| 1965 || || [[Soviet Union|USSR]] || [[Minsk family of computers|Minsk-22]] || АЛГЭК, based on ALGOL-60 and [[COBOL]] support, for economical tasks
|-
|[[MALGOL]]|| 1966 || publ. A. Viil, M Kotli & M. Rakhendi, || [[Estonian Soviet Socialist Republic|Estonian SSR]] || [[Minsk family of computers|Minsk-22]]
|-
|[[ALGAMS]]|| 1967 || GAMS group (ГАМС, группа автоматизации программирования для машин среднего класса), cooperation of Comecon Academies of Science || [[Comecon]] || [[Minsk family of computers|Minsk-22]], later [[ES EVM]], [[BESM]]
|-
|[[ALGOL/ZAM]]|| 1967 || || Poland || || Polish [[ZAM (computer)|ZAM]] computer
|-
|[http://hopl.murdoch.edu.au/showlanguage.prx?exp=7288&language=Chinese%20Algol Chinese Algol]|| 1972 || || China || Chinese characters, expressed via the Symbol system
|-
|[[DG/L]]|| 1972 || || USA || || DG [[Data General Eclipse|Eclipse]] family of  Computers
|}

The Burroughs dialects included special Bootstrapping dialects such as [[ESPOL]] and [[NEWP]].

==Properties==
ALGOL 60 as officially defined had no I/O facilities; implementations defined their own in ways that were rarely compatible with each other. In contrast, ALGOL 68 offered an extensive library of ''transput'' (ALGOL 68 parlance for Input/Output) facilities.

{{cite book
| last=Aho
| first=Alfred V.
| authorlink=Alfred V. Aho
| coauthors=[[Ravi Sethi]], [[Jeffrey Ullman|Jeffrey D. Ullman]]
| title=[[Dragon Book (computer science)|Compilers: Principles, Techniques, and Tools]]
| year=1986
| edition=1st
| publisher=Addison-Wesley
However, call-by-name is still beloved of ALGOL implementors for the interesting "[[thunk]]s" that are used to implement it. [[Donald Knuth]] devised the "[[man or boy test]]" to separate compilers that correctly implemented "recursion and non-local references." This test contains an example of call-by-name.

===ALGOL 60 Reserved words and restricted identifiers===
There are 35 such reserved words in the standard [[Burroughs large systems]] sub-language: 

{|
|
|
|
|
|
|
|
|}

There are 71 such restricted identifiers in the standard Burroughs large systems sub-language: 
{|
|
|
|
|
|
|
|
|}

and also the names of all the intrinsic functions.

==Examples and portability issues==
===Code sample comparisons===
====ALGOL 60====
(The way the bold text has to be written depends on the implementation, e.g. 'INTEGER' (including the quotation marks) for '''integer'''; this is known as [[stropping (syntax)|stropping]].)

 '''procedure''' Absmax(a) Size:(n, m) Result:(y) Subscripts:(i, k);
     '''value''' n, m; '''array''' a; '''integer''' n, m, i, k; '''real''' y;
 '''comment''' The absolute greatest element of the matrix a, of size n by m 
 is transferred to y, and the subscripts of this element to i and k;
 '''begin''' '''integer''' p, q;
     y := 0; i := k := 1;
     '''for''' p:=1 '''step''' 1 '''until''' n '''do'''
     '''for''' q:=1 '''step''' 1 '''until''' m '''do'''
         '''if''' abs(a[p, q]) > y '''then'''
             '''begin''' y := abs(a[p, q]);
             i := p; k := q
             '''end'''
 '''end''' Absmax


  FLOATING POINT ALGOL TEST'
  BEGIN REAL A,B,C,D'
 
  READ D'
 
  FOR A:= 0.0 STEP D UNTIL 6.3 DO
  BEGIN
    PRINT PUNCH(3),££L??'
    B := SIN(A)'
    C := COS(A)'
    PRINT PUNCH(3),SAMELINE,ALIGNED(1,6),A,B,C'
  END'
  END'

ALIGNED(1,6) controls the format of the output with 1 digit before and 6 after the decimal point

====ALGOL 60 family====
Since ALGOL 60 had no I/O facilities, there is no portable [[hello world program]] in ALGOL.  The following program could (and still will) compile and run on an ALGOL implementation for a Unisys A-Series mainframe, and is a straightforward simplification of code taken from [http://www.engin.umd.umich.edu/CIS/course.des/cis400/index.html The Language Guide] at the [[University of Michigan]]-Dearborn Computer and Information
Science Department [http://www.engin.umd.umich.edu/CIS/course.des/cis400/algol/hworld.html Hello world! ALGOL Example Program page].

 BEGIN
   FILE F(KIND=REMOTE);
   EBCDIC ARRAY E[0:11];
   REPLACE E BY "HELLO WORLD!";
   WRITE(F, *, E);
 END.

A simpler program using an inline format:

 BEGIN
   FILE F(KIND=REMOTE);
 END.

An even simpler program using the Display statement:

 BEGIN DISPLAY("HELLO WORLD!") END.

An alternative example, using Elliott Algol I/O is as follows.  Elliott Algol used different characters for "open-string-quote" and "close-string-quote", represented here by ‘ and ’.

  '''program''' HiFolks;
  '''begin'''
     '''print''' ‘Hello world’;
  '''end''';

Here's a version for the Elliott 803 Algol (A104) The standard Elliott 803 used 5 hole paper tape and thus only had upper case.  The code lacked any quote characters so £ (UK Pound Sign) was used for open quote and ? (Question Mark) for close quote.  Special sequences were placed in double quotes (e.g. ££L?? produced a new line on the teleprinter).   

   HIFOLKS'
   BEGIN
      PRINT £HELLO WORLD£L??'
   END'

The [[ICT 1900]] Algol I/O version allowed input from paper tape or punched card.  Paper tape 'full' mode allowed lower case.  Output was to a line printer.
   'PROGRAM' (HELLO)
   'BEGIN'
      'COMMENT' OPEN QUOTE IS '(', CLOSE IS ')', PRINTABLE SPACE HAS TO
                BE WRITTEN AS % BECAUSE SPACES ARE IGNORED;
      WRITE TEXT('('HELLO%WORLD')');
   'END'
   'FINISH'

==See also==
{{col-begin}}
{{col-3}}
* [[ALGOL]]
* [[ALGOL 58]]
* [[ALGOL N]]
* [[ALGOL 68]]
* [[ALGOL W]]
{{col-3}}
* [[Atlas Autocode]]
* [[Coral 66]]
* [[Edinburgh IMP]]
* [[Jensen's Device]]
* [[ISWIM]]
{{col-3}}
* [[JOVIAL]]
* [[NELIAC]]
* [[Simula]]
* [[S-algol]]
* [[Scheme (programming language)]]
{{col-end}}

==References==
{{Reflist|2}}

==Further reading==
* B. Randell and L.J. Russell, ''ALGOL 60 Implementation: The Translation and Use of ALGOL 60 Programs on a Computer''. Academic Press, 1964. The design of the '''Whetstone Compiler'''. One of the early published descriptions of implementing a compiler. See the related papers: [http://www.cs.ncl.ac.uk/research/pubs/articles/papers/427.pdf Whetstone Algol Revisited], and [http://www.cs.ncl.ac.uk/publications/books/papers/124.pdf The Whetstone KDF9 Algol Translator] by B. Randell
* E. W, Dijkstra, ''Algol 60 translation: an algol 60 translator for the x1 and making a translator for algol 60'', report MR 35/61. Mathematisch Centrum, Amsterdam, 1961. [http://www.cs.utexas.edu/users/EWD/MCReps/MR35.PDF]

===Comparisons with other languages===

==External links==
* [http://www.masswerk.at/algol60/report.htm Revised Report on the Algorithmic Language Algol 60] by Peter Naur, et al. ALGOL definition
* A BNF [http://www.lrz.de/~bernhard/Algol-BNF.html syntax summary] of ALGOL 60
* [http://www.cs.ucsb.edu/~ravenben/papers/coreos/Hoa81.pdf "The Emperor's Old Clothes"] - Hoare's 1980 ACM Turing Award speech, which discusses ALGOL history and his involvement
* [http://www.gnu.org/software/marst/ MARST], a free Algol-to-C translator
* [http://rogerdmoore.ca/JOUR/ AN IMPLEMENTATION OF ALGOL 60 FOR THE FP6000] Discussion of some implementation issues.
* [http://portal.acm.org/ft_gateway.cfm?id=808370&type=pdf&coll=&dl=ACM&CFID=15151515&CFTOKEN=6184618 "The European Side of the Last Phase of the Development of ALGOL 60" by Peter Naur]
* Edinburgh University wrote compilers for Algol60 (later updated for Algol60M) based on their Atlas Autocode compilers initially bootstrapped from the Atlas to the KDF-9. The Edinburgh compilers generated code for the ICL1900, the ICL4/75 (an IBM360 clone), and the ICL2900. Here is the [http://history.dcs.ed.ac.uk/archive/os/emas/users/ercc07/emas-2900/algolps9.txt BNF for Algol60] and the [http://history.dcs.ed.ac.uk/archive/os/emas/emas2/compilers/algol/algol60fs.imp.html ICL2900 compiler source], [http://history.dcs.ed.ac.uk/archive/os/emas/emas2/compilers/algol/bsyslib.txt-view.html library documentation], and [http://history.dcs.ed.ac.uk/archive/os/emas/users/ercc07/emas-2900/ a considerable test suite] including [http://history.dcs.ed.ac.uk/archive/os/emas/users/ercc07/emas-2900/wichtests_pete1.txt Brian Wichmann's tests.] Also there is a rather superficial [http://history.dcs.ed.ac.uk/archive/os/emas/users/ercc07/emas-2900/palgcons.txt Algol60 to Atlas Autocode source-level translator].
* [[Eric S. Raymond]]'s [http://www.catb.org/retro/ Retrocomputing Museum], among others a link to the NASE Algol-60 interpreter written in C.
* [http://www.bertnase.de/a60 The NASE interpreter]
* Stories about Burrough's B5000 [http://ed-thelen.org/comp-hist/B5000-AlgolRWaychoff.html]

{{DEFAULTSORT:Algol}}
[[Category:ALGOL 60 dialects]]
[[Category:Articles with example ALGOL 60 code]]
[[Category:Procedural programming languages]]
[[Category:Structured programming languages]]
[[Category:Systems programming languages]]

[[Category:Algol programming language family]]

[[bn:অ্যালগল ৬০]]
[[de:Algol 60]]
[[et:Algol-60]]
[[nl:Algol-60]]
[[pt:ALGOL 60]]
