{{N-bit|64|(8 [[octet (computing)|octets]])}}

'''64-bit''' CPUs have existed in [[supercomputers]] since the 1970s ([[Cray-1]], 1975; [[CDC 6000 series]], 1964, were 60-bit) and in [[RISC]]-based [[computer workstation|workstations]] and [[Server (computing)|server]]s since the early 1990s. In 2003 they were introduced to the (previously [[32-bit]]) mainstream [[personal computer]] arena, in the form of the [[x86-64]] and 64-bit [[PowerPC]] processor architectures.

Without further qualification, a ''64-bit'' computer architecture generally has integer and addressing [[processor register|registers]] that are 64 bits wide, allowing direct support for 64-bit data types and addresses. However, a CPU might have external [[data bus]]es or [[address bus]]es with different sizes from the registers, even larger (the 32-bit [[Pentium (brand)|Pentium]] had a 64-bit data bus, for instance). The term may also refer to the size of low-level data types, such as 64-bit [[Floating point|floating-point]] numbers.

==Architectural implications==
Processor registers are typically divided into several groups: ''integer'', ''floating-point'', ''[[SIMD]]'', ''control'', and often special registers for address arithmetic which may have various uses and names such as ''address'', ''index'' or ''base registers''. However, in modern designs, these functions are often performed by more general purpose ''integer'' registers. In most processors, only integer and/or address-registers can be used to address data in memory, the other types cannot. The size of these registers therefore normally limits the amount of directly addressable memory, even if there are registers, such as floating-point registers, that are wider.

Most high performance 32-bit and 64-bit processors (some notable exceptions are most [[ARM architecture|ARM]] and 32-bit [[MIPS architecture|MIPS]] CPUs) have integrated floating point hardware, which is often, but not always, based on 64-bit units of data. For example, although the [[x86]]/[[x87]] architecture has instructions capable of loading and storing 64-bit (and 32-bit) floating-point values in memory, the internal data and register format is 80 bits wide. In contrast, the 64-bit [[DEC Alpha|Alpha]] family uses a 64-bit floating-point data and register format (as well as 64-bit integer registers).

==History==


==Limitations==
{{Ref improve section|date=January 2010}}


==64-bit processor timeline==
;1961: IBM delivers the [[IBM 7030 Stretch]] [[supercomputer]], which uses 64-bit data words and 32- or 64-bit instruction words.
;1974: [[Control Data Corporation]] launches the [[CDC Star-100]] vector supercomputer, which uses a 64-bit word architecture (previous CDC systems were based on a 60-bit architecture).
:[[International Computers Limited]] launches the [[ICL 2900 Series]] with 32-bit, 64-bit, and 128-bit [[two's complement]] integers; 64-bit and 128-bit floating point; 32-bit, 64-bit and 128-bit packed decimal and a 128-bit accumulator register. The architecture has survived through a succession of ICL and Fujitsu machines. The latest is the Fujitsu Supernova, which emulates the original environment on 64-bit Intel processors.
;1976: [[Cray Research]] delivers the first [[Cray-1]] supercomputer, which is based on a 64-bit word architecture and will form the basis for later Cray vector supercomputers.
;1983: [[Elxsi]] launches the Elxsi 6400 parallel [[minisupercomputer]]. The Elxsi architecture has 64-bit data registers but a 32-bit address space.
;1994: [[Intel]] announces plans for the 64-bit [[IA-64]] architecture (jointly developed with [[Hewlett-Packard]]) as a successor to its 32-bit [[IA-32]] processors. A 1998 to 1999 launch date is targeted. SGI releases IRIX 6.0, with 64-bit support for the [[R8000]] chip set.
;1997: IBM releases the [[RS64]] line of 64-bit [[PowerPC]]/PowerPC AS processors.
;1999: Intel releases the [[instruction set]] for the IA-64 architecture. [[AMD]] publicly discloses its set of 64-bit extensions to IA-32, called [[x86-64]] (later branded AMD64).
;2000: IBM ships its first 64-bit [[z/Architecture]] [[Mainframe computer|mainframe]], the [[zSeries]] z900.  z/Architecture is a 64-bit version of the 32-bit [[ESA/390]] architecture, a descendant of the 32-bit [[System/360]] architecture.
;2001: Intel finally ships its IA-64 processor line, after repeated delays in getting to market. Now branded [[Itanium]] and targeting high-end servers, sales fail to meet expectations.
;2003: AMD introduces its [[Opteron]] and [[Athlon 64]] processor lines, based on its AMD64 architecture which is the first x86-based 64-bit processor architecture. [[Apple Computer|Apple]] also ships the 64-bit "G5" [[PowerPC 970]] CPU produced by IBM. Intel maintains that its Itanium chips would remain its only 64-bit processors.
;2004: Intel, reacting to the market success of AMD, admits it has been developing a clone of the AMD64 extensions named IA-32e (later renamed EM64T, then yet again renamed to Intel 64). Intel ships updated versions of its [[Xeon]] and [[Pentium 4]] processor families supporting the new 64-bit instruction set.
  | title = VIA Unveils Details of Next-Generation Isaiah Processor Core
  | publisher = VIA Technologies, Inc.
  | url = http://www.via.com.tw/en/resources/pressroom/2004_archive/pr041005_fpf-isaiah.jsp
;2006: Sony, IBM, and Toshiba begin manufacturing of the 64-bit [[Cell (microprocessor)|Cell processor]] for use in the [[PlayStation 3]], servers, workstations, and other appliances.

==64-bit operating system timeline==
;1993: DEC releases the 64-bit [[OSF/1|DEC OSF/1 AXP]] [[Unix-like]] operating system  (later renamed Tru64 UNIX) for its systems based on the [[DEC Alpha|Alpha]] architecture.
;1995: DEC releases [[OpenVMS]] 7.0, the first full 64-bit version of OpenVMS for Alpha.
;1996: Support for the [[MIPS architecture|MIPS]] [[R4000]] processor is added by  [[Silicon Graphics]] to the [[IRIX]] [[operating system]] in release 6.2.
;1998: Sun releases [[Solaris (operating system)|Solaris 7]], with full 64-bit [[UltraSPARC]] support.
;2000: IBM releases [[z/OS]], a 64-bit operating system descended from [[MVS]], for the new [[zSeries]] 64-bit mainframes; 64-bit [[Linux on zSeries]] follows the CPU release almost immediately.
;2001: [[NetBSD]] is the first operating system to run on the Intel Itanium processor at the processor's release. Further, Microsoft releases [[Windows XP 64-Bit Edition]], also for the Itanium's IA-64 architecture, although it was able to run [[32-bit application]]s through an execution layer.
;2005: On January 31, Sun releases [[Solaris (operating system)|Solaris 10]] with support for AMD64 and EM64T processors. On April 29, Apple releases [[Mac OS X 10.4]] "Tiger" which provides limited support for 64-bit command-line applications on machines with PowerPC 970 processors; later versions for Intel-based Macs supported 64-bit command-line applications on Macs with EM64T processors.  On April 30, Microsoft releases [[Windows XP Professional x64 Edition]] for AMD64 and EM64T processors.
;2006: Microsoft releases [[Windows Vista]], including a 64-bit version for AMD64/EM64T processors that retains 32-bit compatibility. In the 64-bit version, all Windows applications and components are 64-bit, although many also have their 32-bit versions included for compatibility with plugins.
;2007: Apple releases [[Mac OS X 10.5]] "Leopard", which fully supports 64-bit applications on machines with PowerPC 970 or EM64T processors.

==32- vs 64-bit==
  | title = Windows 7: 64 bit vs 32 bit?
  | publisher = W7 Forums
  | url = http://www.w7forums.com/windows-7-64-bit-vs-32-bit-t484.html

One significant exception to this is the [[AS/400]], whose software runs on a virtual [[Instruction Set Architecture|ISA]], called TIMI (Technology Independent Machine Interface) which is translated to native machine code by low-level software before being executed. The low-level software is all that has to be rewritten to move the entire OS and all software to a new platform, such as when IBM transitioned their line from the older 32/48-bit "IMPI" instruction set to 64-bit PowerPC (IMPI wasn't anything like 32-bit PowerPC, so this was an even bigger transition than from a 32-bit version of an instruction set to a 64-bit version of the same instruction set).

While 64-bit architectures indisputably make working with large data sets in applications such as [[digital video]], scientific computing, and large [[database]]s easier, there has been considerable debate as to whether they or their 32-bit compatibility modes will be faster than comparably-priced 32-bit systems for other tasks. In [[x86-64]] architecture (AMD64), the majority of the 32-bit operating systems and applications are able to run smoothly on the 64-bit hardware.

  | title = Frequently Asked Questions About the Java HotSpot VM
  | publisher = Sun Microsystems, Inc
  | url = http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_compilers

Speed is not the only factor to consider in a comparison of 32-bit and 64-bit processors. Applications such as multi-tasking, stress testing, and clustering—for HPC ([[high-performance computing]])—may be more suited to a 64-bit architecture when deployed appropriately. 64-bit clusters have been widely deployed in large organizations such as IBM, HP and Microsoft, for this reason.

==Pros and cons==
A common{{fact|date=January 2011}} misconception is that 64-bit architectures are no better than 32-bit architectures unless the computer has more than 4 GB of [[main memory]]. This is not entirely true:

*Some operating systems and certain hardware configurations limit the physical memory space to 3 GB on [[IA-32]] systems, due to much of the 3–4 GB region being reserved for hardware addressing; see [[3 GB barrier]]. This is not present in 64-bit architectures, which can use 4 GB of memory and more. However, IA-32 processors from the [[Pentium II]] onwards allow for a 36-bit ''physical'' memory address space, using [[Physical Address Extension]] (PAE), which gives a 64 GB physical address range, of which up to 62 GB may be used by main memory; operating systems that support PAE may not be limited to 4GB of physical memory, even on IA-32 processors.

*Some operating systems reserve portions of [[Process (computing)|process]] [[address space]] for OS use, effectively reducing the total address space available for mapping memory for user programs. For instance, Windows XP DLLs and other user mode OS components are mapped into each process's address space, leaving only 2 to 3 GB (depending on the settings) address space available. This limit is currently much higher on 64-bit operating systems and does not realistically restrict memory usage.

*[[Memory-mapped file]]s are becoming more difficult to implement in 32-bit architectures.{{Citation needed|date=November 2010}} A 4 GB file is no longer uncommon, and such large files cannot be memory mapped easily to 32-bit architectures; only a region of the file can be mapped into the address space, and to access such a file by memory mapping, those regions will have to be mapped into and out of the address space as needed. This is a problem, as memory mapping remains one of the most efficient disk-to-memory methods, when properly implemented by the OS.

*Some programs such as data encryption software can benefit greatly from 64-bit registers (if the software is 64-bit compiled) and effectively execute 3 to 5 times faster on 64-bit than on 32-bit.{{Citation needed|date=April 2010}}

*Some 64-bit architectures, such as [[x86-64]], allow for more general purpose registers than their 32-bit counterparts. This is a significant speed increase for tight loops since the processor doesn't have to go out the second level cache or main memory to gather data if it can fit in the available registers.
:Example in [[C (programming language)|C]]:
{
  b = a;
  c = b;
  d = c;
  e = d;
}
:If a processor only has the ability to keep two three values/variables (registers) in fast memory it would need to stop executing and push and pop the stack to be able to process variable d and e as well. A process that takes a lot of CPU cycles. A processor that is capable of holding all the values/variables (registers) in memory can simply just loop through this without needing to halt execution for each iteration just to get the proper data in memory. This behavior can easily be compared with virtual memory, although any effects are contingent upon the compiler.

The main disadvantage of 64-bit architectures is that relative to 32-bit architectures, the same data occupies more space in memory (due to swollen pointers and possibly other types and alignment padding). This increases the memory requirements of a given process and can have implications for efficient processor cache utilization. Maintaining a partial 32-bit model is one way to handle this and is in general reasonably effective. For example, the [[z/OS]] operating system takes this approach currently, requiring program code to reside in 31-bit address spaces (the high order bit is not used in address calculation on the underlying hardware platform) while data objects can optionally reside in 64-bit regions.

Currently, most proprietary [[x86]] software is compiled into 32-bit code, with less being also compiled into 64-bit code (although the trend is rapidly equalizing {{Citation needed|date=July 2010}}), so much does not take advantage of the larger 64-bit address space or wider 64-bit registers and data paths on x86 processors, or the additional registers in 64-bit mode. However, users of most RISC platforms, and users of [[free software|free]] or [[open source]] operating systems (where the [[source code]] is available for recompiling with a 64-bit compiler) have been able to use exclusive 64-bit computing environments for years due to the likelihood of the existence of someone willing to compile the code thusly. Not all such applications require a large address space nor manipulate 64-bit data items, so they wouldn't benefit from the larger address space or wider registers and data paths. The main advantage to 64-bit versions of such applications is the ability to access more registers in the [[x86-64]] architecture.

=== Software availability ===

This is less of a problem with open source drivers that are already available for a 32-bit OS, since they can be modified to be 64-bit compatible, if necessary. Furthermore, support for hardware made before early 2007 was equally troubling for opensource platforms due to their small market shares in desktop market.

On most Macs, [[Mac OS X]] runs with a 32-bit kernel even on 64-bit-capable processors, but the 32-bit kernel can run 64-bit user-mode code; this allows those Macs to support 64-bit processes while still supporting 32-bit device drivers - although not 64-bit drivers and performance advantages that would come with them.  On systems with 64-bit processors, both the 32-bit and 64-bit Mac OS X kernel can run 32-bit user-mode code, and all versions of Mac OS X include 32-bit versions of libraries that 32-bit applications would use, so 32-bit user-mode software for Mac OS X will run on those systems.

[[Linux]] and most other [[Unix-like]] operating systems, and the [[C (programming language)|C]] and [[C++]] toolchains for them, have supported 64-bit processors for many years: releasing 64-bit versions of their operating system before official Microsoft releases.  Many applications and libraries for those platforms are [[open source]], written in C and C++, so that, if it's 64-bit-safe, they can be compiled into 64-bit versions.  This source bade distribution model with an emphasis on frequent releases and cutting edge code makes availability of application software for those operating systems less of an issue.

==64-bit data models==
{{inappropriate tone|section|date=December 2010}}
Converting application software written in a [[high-level language]] from a 32-bit architecture to a 64-bit architecture varies in difficulty.
One common recurring problem is that some programmers assume that [[Pointer (computing)|pointers]] have the same length as some other data type. These programmers assume they can transfer quantities between these data types without losing information.
Those assumptions happen to be true on some 32-bit machines (and even some 16-bit machines), but they are no longer true on 64-bit machines.
[http://www.ibm.com/developerworks/power/library/pa-openpower1/#N100C7 "Exploring 64-bit development on POWER5: How portable is your code, really?"]
by Peter Seebach 2006



Neither C nor C++ define the length of a pointer, int, or long to be a specific number of bits. In C99, however, [[stdint.h]] provides names for integer types with certain numbers of bits where those types are available.

===Specific C-language data models===
In most programming environments on 32-bit machines, pointers, "int" (that is, integer) types, and "long" (that is, long integer) types are all 32 bits wide.

However, in many programming environments on 64-bit machines, "int" variables are still 32 bits wide, but long integers and pointers are 64 bits wide. These are described as having an '''LP64''' [[data model]]. Another alternative is the '''ILP64''' data model in which all three data types are 64 bits wide, and even '''SILP64''' where "short" integers are also 64 bits wide{{Citation needed|date=February 2007}}. However, in most cases the modifications required are relatively minor and straightforward, and many well-written programs can simply be recompiled for the new environment without changes. Another alternative is the '''LLP64''' model, which maintains compatibility with 32-bit code by leaving both int and long as 32-bit. "LL" refers to the "long long integer" type, which is at least 64 bits on all platforms, including 32-bit environments.

{|class="wikitable"
|+64-bit data models
|-
! Data model
! short (integer)
! int
! long (integer)
! long long
! pointers/size_t
! Sample operating systems
|-
| 16
| 32
| 32
| 64
| 64
| [[Microsoft Windows]] (X64/IA-64)
|-
| 16
| 32
| 64
| 64
| 64
| Most [[Unix]] and [[Unix-like]] systems, e.g. [[Solaris (operating system)|Solaris]], [[Linux]], and [[Mac OS X]]
|-
! ILP64
| 16
| 64
| 64
| 64
| 64
| [[HAL Computer Systems]] port of Solaris to [[SPARC64]]
|-
! SILP64
| 64
| 64
| 64
| 64
| 64
| [[Unicos]]
|}

Many 64-bit compilers today use the '''LP64''' model (including Solaris, [[AIX]], [[HP-UX]], Linux, [[Mac OS X]], [[FreeBSD]], and IBM [[z/OS]] native compilers). Microsoft's [[Visual C++]] compiler uses the '''LLP64''' model. The disadvantage of the LP64 model is that storing a long into an int may overflow. On the other hand, casting a pointer to a long will work. In the LLP model, the reverse is true. These are not problems which affect fully standard-compliant code but code is often written with implicit assumptions about the widths of integer types.

Note that a programming model is a choice made on a per-compiler basis, and several can coexist on the same OS. However, the programming model chosen as the primary model for the OS API typically dominates.

Another consideration is the data model used for [[Device driver|driver]]s. Drivers make up the majority of the operating system code in most modern operating systems (although many may not be loaded when the operating system is running). Many drivers use pointers heavily to manipulate data, and in some cases have to load pointers of a certain size into the hardware they support for [[Direct memory access|DMA]]. As an example, a driver for a 32-bit PCI device asking the device to DMA data into upper areas of a 64-bit machine's memory could not satisfy requests from the operating system to load data from the device to memory above the 4 gigabyte barrier, because the pointers for those addresses would not fit into the DMA registers of the device. This problem is solved by having the OS take the memory restrictions of the device into account when generating requests to drivers for DMA, or by using an [[IOMMU]].

==Current 64-bit microprocessor architectures==
64-bit [[processor architecture|microprocessor architectures]] ({{As of|2010|lc=on}}) include:
* The 64-bit extension created by [[Advanced Micro Devices|AMD]] to Intel's [[x86]] architecture (later licensed by Intel); commonly known as "[[x86-64]]", "AMD64", or "x64":
** AMD's [[AMD64]] extensions (used in [[Athlon 64]], [[Opteron]], [[Sempron]], [[Turion 64]], [[Phenom (processor)|Phenom]], [[Athlon II]] and [[Phenom II]] processors)
** [[Intel]]'s [[Intel 64]] extensions (used in newer [[Celeron]], [[Pentium 4]], [[Pentium D]], [[Xeon]], [[Core 2]], [[Intel Core i3|Core i3]], [[Intel Core i5|Core i5]], [[Intel Core i7|Core i7]], and [[Intel Atom|Atom]] processors)
** [[VIA Technologies]]' 64-bit extensions, used in the [[VIA Nano]] processors
* [[Power Architecture]]:
** IBM's [[POWER6]] processor
** IBM's [[PowerPC 970]] processor
** The [[Cell Broadband Engine]] used in the [[PlayStation 3]], designed by IBM, [[Toshiba]] and [[Sony]], combines a 64-bit Power architecture processor with seven or eight Synergistic Processing Elements.
** IBM's "[[Xenon (processor)|Xenon]]" processor used in the [[Microsoft]] [[Xbox 360]] comprises three 64-bit PowerPC cores.
* [[SPARC]] V9 architecture:
** [[Sun Microsystems|Sun]]'s [[UltraSPARC]] processors
** [[Fujitsu]]'s [[SPARC64]] processors
* IBM's [[z/Architecture]], used by IBM zSeries and [[System z9]] [[IBM mainframes|mainframes]], a 64-bit version of the [[ESA/390]] architecture
* Intel's [[IA-64]] architecture (used in [[Itanium]] processors)
* [[MIPS Technologies]]' [[MIPS architecture|MIPS64 architecture]]

Most 64-bit processor architectures can execute code for the 32-bit version of the architecture natively without any performance penalty.{{Citation needed|date=September 2010}} This kind of support is commonly called ''bi-arch support'' or more generally ''multi-arch support''.

==Images==
In digital imaging, 64-bit refers to [[Deep Color|48-bit images]] with a [[16-bit]] [[Alpha compositing|alpha channel]].

==See also==
* [[Computer memory]]

==References==
{{Reflist}}

==External links==
*Andrey Karpov. [http://software.intel.com/en-us/articles/collection-of-examples-of-64-bit-errors-in-real-programs/ A Collection of Examples of 64-bit Errors in Real Programs]
*[http://software.intel.com/en-us/articles/lessons-on-development-of-64-bit-cc-applications/ Lessons on development of 64-bit C/C++ applications]
*[http://www.unix.org/version2/whatsnew/lp64_wp.html 64-Bit Programming Models: Why LP64?]
*[http://www.codeproject.com/KB/system/AMD64_EM64T_architectur.aspx AMD64 (EM64T) architecture]
*[http://www.64bitdrivers.com/ Large list of 64 bit drivers for x64 operating systems]
*[http://www.igorware.com/64bit-checker Detect if you have 64-bit operating system]

{{FOLDOC}}

{{CPU technologies}}

[[ca:64 bits]]
[[cs:64bitový]]
[[de:64-Bit]]
[[et:64-bitine protsessor]]
[[es:64 bits]]
[[fr:Processeur 64 bits]]
[[ko:64비트]]
[[it:64 bit]]
[[lv:64 biti]]
[[ms:64-bit]]
[[ja:64ビット]]
[[pl:Architektura 64-bitowa]]
[[pt:64 bits]]
